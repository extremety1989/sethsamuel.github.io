{"version":3,"sources":["webpack:///gol-render.js","webpack:///webpack/bootstrap c3815b4d43a585c13646?9ba1*","webpack:///./js/gol/webgl.js?307a","webpack:///./js/gol/programs/identity2d.js?e399","webpack:///./js/gol/render-program.js?ee01","webpack:///./js/gol/state-program.js?51fa","webpack:///./js/gol/programs/gameoflife.js?abcb","webpack:///./js/gol-render.js","webpack:///./js/gol/programs/gameoflife-blur.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","createProgram","vertexSource","fragmentSource","resize","size","Math","pow","floor","log2","min","window","innerWidth","innerHeight","scale","canvas","width","height","style","gl","viewport","arguments","length","undefined","document","body","querySelector","getContext","addEventListener","clearColor","clear","COLOR_BUFFER_BIT","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","Error","getShaderInfoLog","console","log","fragmentShader","FRAGMENT_SHADER","shaderProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","useProgram","createTexture","tTexture","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","REPEAT","TEXTURE_WRAP_T","Object","defineProperty","value","Identity2D","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","_webgl","RenderProgram","_ref","_ref$scale","this","_createProgram","currentState","vertexBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","vertices","bufferData","Float32Array","STATIC_DRAW","aPosition","getAttribLocation","enableVertexAttribArray","vertexAttribPointer","FLOAT","uWidth","getUniformLocation","uniform1f","stateTexture","predraw","uScale","drawArrays","TRIANGLE_STRIP","StateProgram","iteration","uShouldUpdate","uIteration","tTexture0","tTexture1","frameBuffer","createFramebuffer","bindFramebuffer","FRAMEBUFFER","texImage2D","RGBA","UNSIGNED_BYTE","renderBuffer","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","DEPTH_COMPONENT16","framebufferRenderbuffer","DEPTH_ATTACHMENT","state","uniform1i","_ref2","mousePosition","uMousePosition","uniform2f","framebufferTexture2D","COLOR_ATTACHMENT0","_interopRequireDefault","obj","__esModule","default","_identity2d","_identity2d2","GameOfLife","draw","golRenderProgram","golStateProgram","isPaused","incrementState","requestAnimationFrame","_stateProgram","_stateProgram2","_renderProgram","_renderProgram2","_gameoflife","_gameoflife2","_gameoflifeBlur","_gameoflifeBlur2","createElement","appendChild","initialArray","time","j","random","setState","ImageData","Uint8ClampedArray","timeEnd","evt","GameOfLifeBlur"],"mappings":"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","file":"gol-render.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(14);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t\tvalue: true\n\t});\n\texports.createProgram = createProgram;\n\texports.createTexture = createTexture;\n\tfunction createProgram(vertexSource, fragmentSource) {\n\t\tvar scale = arguments.length <= 2 || arguments[2] === undefined ? 1 : arguments[2];\n\t\n\t\t// GLOBALS\n\t\tvar body = document.body;\n\t\tvar canvas = document.querySelector('canvas');\n\t\tvar gl = canvas.getContext('webgl2');\n\t\t// END GLOBALS\n\t\n\t\t// BEGIN WINDOW SIZING\n\t\tfunction resize() {\n\t\t\tvar size = Math.pow(2, Math.floor(Math.log2(Math.min(window.innerWidth, window.innerHeight)))) * 2 * scale;\n\t\t\t// const size = 256;\n\t\t\tcanvas.width = size;\n\t\t\tcanvas.height = size;\n\t\t\tcanvas.style.width = size / 2 + 'px';\n\t\t\tcanvas.style.height = size / 2 + 'px';\n\t\n\t\t\t// Set viewport\n\t\t\tgl.viewport(0, 0, canvas.width, canvas.height);\n\t\t}\n\t\tresize();\n\t\n\t\twindow.addEventListener('resize', resize);\n\t\t// END WINDOW SIZING\n\t\n\t\t// GL SETTINGS\n\t\n\t\t// Color to draw on clear\n\t\tgl.clearColor(0, 0, 0, 1);\n\t\n\t\t// Clear buffers\n\t\tgl.clear(gl.COLOR_BUFFER_BIT);\n\t\n\t\t// END GL SETTINGS\n\t\n\t\t// INITIALIZE SHADERS\n\t\n\t\t// CREATE VERTEX SHADER\n\t\tvar vertexShader = gl.createShader(gl.VERTEX_SHADER);\n\t\tgl.shaderSource(vertexShader, vertexSource);\n\t\tgl.compileShader(vertexShader);\n\t\tif (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\n\t\t\tthrow new Error(\"An error occurred compiling the shader: \" + gl.getShaderInfoLog(vertexShader));\n\t\t} else {\n\t\t\tconsole.log(\"Vertex shader compiled\");\n\t\t}\n\t\t// END CREATE VERTEX SHADER\n\t\n\t\t// CREATE FRAGMENT SHADER\n\t\tvar fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n\t\tgl.shaderSource(fragmentShader, fragmentSource);\n\t\tgl.compileShader(fragmentShader);\n\t\tif (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n\t\t\tthrow new Error(\"An error occurred compiling the shader: \" + gl.getShaderInfoLog(fragmentShader));\n\t\t} else {\n\t\t\tconsole.log(\"Fragment shader compiled\");\n\t\t}\n\t\t// END CREATE FRAGMENT SHADER\n\t\n\t\t// COMPILE PROGRAM\n\t\tvar shaderProgram = gl.createProgram();\n\t\tgl.attachShader(shaderProgram, vertexShader);\n\t\tgl.attachShader(shaderProgram, fragmentShader);\n\t\tgl.linkProgram(shaderProgram);\n\t\n\t\tif (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\n\t\t\tthrow new Error(\"Unable to initialize the shader program.\");\n\t\t} else {\n\t\t\tconsole.log(\"Initialized shader program\");\n\t\t}\n\t\tgl.useProgram(shaderProgram);\n\t\t// END COMPILE PROGRAM\n\t\n\t\t// END INITIALIZE SHADERS\n\t\n\t\treturn { gl: gl, shaderProgram: shaderProgram };\n\t}\n\t\n\tfunction createTexture() {\n\t\tvar gl = document.querySelector('canvas').getContext('webgl2');\n\t\tvar tTexture = gl.createTexture();\n\t\tgl.activeTexture(gl.TEXTURE0);\n\t\tgl.bindTexture(gl.TEXTURE_2D, tTexture);\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\n\t\t// gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\n\t\t// gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\t\tgl.bindTexture(gl.TEXTURE_2D, null);\n\t\treturn tTexture;\n\t}\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t\tvalue: true\n\t});\n\tvar Identity2D = {\n\t\tvertexSource: \"#version 300 es\\n\\t\\tprecision highp float;\\n\\t\\tin vec3 aPosition;\\n\\t\\tout vec2 vTexturePosition;\\n\\t\\tout vec2 vPosition;\\n\\t\\tvoid main(void) {\\n\\t\\t\\tvPosition = aPosition.xy;\\n\\t\\t\\tvTexturePosition = vec2(aPosition.x + 1.0, -1.0 + aPosition.y) * 0.5;\\n\\t\\t\\tgl_Position = vec4(aPosition, 1.0);\\n\\t\\t}\\n\\t\",\n\t\tfragmentSource: \"#version 300 es\\n\\t\\tprecision highp float;\\n\\t\\tuniform sampler2D uSampler;\\n\\t\\tuniform float uScale;\\n\\t\\tin vec2 vTexturePosition;\\n\\t\\tin vec2 vPosition;\\n\\t\\tout vec4 fragmentColor;\\n\\n\\t\\tvoid main(void) {\\n\\t\\t\\tfragmentColor = texture(uSampler, vTexturePosition/uScale);\\n\\t\\t}\\n\\t\"\n\t};\n\t\n\texports.default = Identity2D;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t\tvalue: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _webgl = __webpack_require__(1);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar RenderProgram = function () {\n\t\tfunction RenderProgram(_ref) {\n\t\t\tvar shaderSource = _ref.shaderSource;\n\t\t\tvar _ref$scale = _ref.scale;\n\t\t\tvar scale = _ref$scale === undefined ? 1 : _ref$scale;\n\t\n\t\t\t_classCallCheck(this, RenderProgram);\n\t\n\t\t\tvar _createProgram = (0, _webgl.createProgram)(shaderSource.vertexSource, shaderSource.fragmentSource, scale);\n\t\n\t\t\tvar gl = _createProgram.gl;\n\t\t\tvar shaderProgram = _createProgram.shaderProgram;\n\t\n\t\t\tthis.gl = gl;\n\t\t\tthis.shaderProgram = shaderProgram;\n\t\t\tthis.currentState = 0;\n\t\n\t\t\t// INITIALIZE BUFFERS\n\t\t\tthis.vertexBuffer = gl.createBuffer();\n\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n\t\t\tthis.vertices = [1, 1, 0, -1, 1, 0, 1, -1, 0, -1, -1, 0];\n\t\t\tgl.bufferData(gl.ARRAY_BUFFER, new Float32Array(this.vertices), gl.STATIC_DRAW);\n\t\t\t// END INITIALIZE BUFFERS\n\t\n\t\t\t// POINTERS\n\t\t\tvar aPosition = gl.getAttribLocation(shaderProgram, \"aPosition\");\n\t\t\tgl.enableVertexAttribArray(aPosition);\n\t\t\t//gl.vertexAttribPointer(index, size, type, normalized, stride, offset);\n\t\t\tgl.vertexAttribPointer(aPosition, 3, gl.FLOAT, false, 0, 0);\n\t\n\t\t\tvar uWidth = gl.getUniformLocation(shaderProgram, \"uWidth\");\n\t\t\tgl.uniform1f(uWidth, gl.canvas.width);\n\t\t}\n\t\n\t\t_createClass(RenderProgram, [{\n\t\t\tkey: \"draw\",\n\t\t\tvalue: function draw(stateTexture) {\n\t\t\t\tvar predraw = arguments.length <= 1 || arguments[1] === undefined ? function () {} : arguments[1];\n\t\n\t\t\t\tvar gl = this.gl;\n\t\n\t\t\t\tgl.useProgram(this.shaderProgram);\n\t\t\t\tvar uScale = gl.getUniformLocation(this.shaderProgram, \"uScale\");\n\t\t\t\tgl.uniform1f(uScale, 1);\n\t\t\t\tpredraw();\n\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, stateTexture);\n\t\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n\t\t\t\tgl.drawArrays(gl.TRIANGLE_STRIP, 0, this.vertices.length / 3);\n\t\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, null);\n\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, null);\n\t\t\t}\n\t\t}]);\n\t\n\t\treturn RenderProgram;\n\t}();\n\t\n\texports.default = RenderProgram;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t\tvalue: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _webgl = __webpack_require__(1);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar StateProgram = function () {\n\t\tfunction StateProgram(_ref) {\n\t\t\tvar shaderSource = _ref.shaderSource;\n\t\t\tvar _ref$scale = _ref.scale;\n\t\t\tvar scale = _ref$scale === undefined ? 1 : _ref$scale;\n\t\n\t\t\t_classCallCheck(this, StateProgram);\n\t\n\t\t\tvar _createProgram = (0, _webgl.createProgram)(shaderSource.vertexSource, shaderSource.fragmentSource, scale);\n\t\n\t\t\tvar gl = _createProgram.gl;\n\t\t\tvar shaderProgram = _createProgram.shaderProgram;\n\t\n\t\t\tthis.gl = gl;\n\t\t\tthis.shaderProgram = shaderProgram;\n\t\t\tthis.currentState = 0;\n\t\t\tthis.iteration = 0;\n\t\n\t\t\t// INITIALIZE BUFFERS\n\t\t\tthis.vertexBuffer = gl.createBuffer();\n\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n\t\t\tthis.vertices = [1, 1, 0, -1, 1, 0, 1, -1, 0, -1, -1, 0];\n\t\t\tgl.bufferData(gl.ARRAY_BUFFER, new Float32Array(this.vertices), gl.STATIC_DRAW);\n\t\t\t// END INITIALIZE BUFFERS\n\t\n\t\t\t// POINTERS\n\t\t\tvar aPosition = gl.getAttribLocation(shaderProgram, \"aPosition\");\n\t\t\tgl.enableVertexAttribArray(aPosition);\n\t\t\t//gl.vertexAttribPointer(index, size, type, normalized, stride, offset);\n\t\t\tgl.vertexAttribPointer(aPosition, 3, gl.FLOAT, false, 0, 0);\n\t\n\t\t\tvar uWidth = gl.getUniformLocation(shaderProgram, \"uWidth\");\n\t\t\tgl.uniform1f(uWidth, gl.canvas.width);\n\t\n\t\t\tthis.uShouldUpdate = gl.getUniformLocation(shaderProgram, \"uShouldUpdate\");\n\t\t\tthis.uIteration = gl.getUniformLocation(shaderProgram, \"uIteration\");\n\t\n\t\t\tthis.tTexture0 = (0, _webgl.createTexture)();\n\t\t\tthis.tTexture1 = (0, _webgl.createTexture)();\n\t\n\t\t\tthis.frameBuffer = gl.createFramebuffer();\n\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, this.frameBuffer);\n\t\t\tthis.frameBuffer.width = gl.canvas.width;\n\t\t\tthis.frameBuffer.height = gl.canvas.height;\n\t\t\tgl.bindTexture(gl.TEXTURE_2D, this.tTexture1);\n\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.frameBuffer.width, this.frameBuffer.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n\t\n\t\t\tvar renderBuffer = gl.createRenderbuffer();\n\t\t\tgl.bindRenderbuffer(gl.RENDERBUFFER, renderBuffer);\n\t\t\tgl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, this.frameBuffer.width, this.frameBuffer.height);\n\t\t\tgl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, renderBuffer);\n\t\n\t\t\tgl.bindRenderbuffer(gl.RENDERBUFFER, null);\n\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\t\t}\n\t\n\t\t_createClass(StateProgram, [{\n\t\t\tkey: \"setState\",\n\t\t\tvalue: function setState(state) {\n\t\t\t\tvar gl = this.gl;\n\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, this.tTexture0);\n\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, state);\n\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, null);\n\t\t\t}\n\t\t}, {\n\t\t\tkey: \"drawState\",\n\t\t\tvalue: function drawState() {\n\t\t\t\tvar gl = this.gl;\n\t\t\t\tgl.useProgram(this.shaderProgram);\n\t\n\t\t\t\tgl.uniform1i(this.uShouldUpdate, 0);\n\t\n\t\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\t\t\t\tif (this.currentState == 0) {\n\t\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, this.tTexture0);\n\t\t\t\t} else {\n\t\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, this.tTexture1);\n\t\t\t\t}\n\t\n\t\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n\t\t\t\tgl.drawArrays(gl.TRIANGLE_STRIP, 0, this.vertices.length / 3);\n\t\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, null);\n\t\t\t}\n\t\t}, {\n\t\t\tkey: \"incrementState\",\n\t\t\tvalue: function incrementState() {\n\t\t\t\tvar _ref2 = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t\n\t\t\t\tvar mousePosition = _ref2.mousePosition;\n\t\n\t\t\t\tvar gl = this.gl;\n\t\t\t\tgl.useProgram(this.shaderProgram);\n\t\n\t\t\t\tgl.uniform1i(this.uShouldUpdate, 1);\n\t\t\t\tgl.uniform1i(this.uIteration, this.iteration);\n\t\t\t\tthis.iteration++;\n\t\n\t\t\t\tvar uMousePosition = gl.getUniformLocation(this.shaderProgram, \"uMousePosition\");\n\t\t\t\tif (mousePosition && mousePosition.length == 2) {\n\t\t\t\t\tgl.uniform2f(uMousePosition, mousePosition[0], mousePosition[1]);\n\t\t\t\t} else {\n\t\t\t\t\tgl.uniform2f(uMousePosition, -10, -10);\n\t\t\t\t}\n\t\n\t\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, this.frameBuffer);\n\t\t\t\tif (this.currentState == 0) {\n\t\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, this.tTexture0);\n\t\t\t\t\tgl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.tTexture1, 0);\n\t\t\t\t} else {\n\t\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, this.tTexture1);\n\t\t\t\t\tgl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.tTexture0, 0);\n\t\t\t\t}\n\t\n\t\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n\t\t\t\tgl.drawArrays(gl.TRIANGLE_STRIP, 0, this.vertices.length / 3);\n\t\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, null);\n\t\n\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, null);\n\t\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\t\n\t\t\t\tthis.currentState = (this.currentState + 1) % 2;\n\t\t\t}\n\t\t}, {\n\t\t\tkey: \"stateTexture\",\n\t\t\tvalue: function stateTexture() {\n\t\t\t\tif (this.currentState == 0) {\n\t\t\t\t\treturn this.tTexture0;\n\t\t\t\t} else {\n\t\t\t\t\treturn this.tTexture1;\n\t\t\t\t}\n\t\t\t}\n\t\t}]);\n\t\n\t\treturn StateProgram;\n\t}();\n\t\n\texports.default = StateProgram;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t\tvalue: true\n\t});\n\t\n\tvar _identity2d = __webpack_require__(2);\n\t\n\tvar _identity2d2 = _interopRequireDefault(_identity2d);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar GameOfLife = {\n\t\tvertexSource: _identity2d2.default.vertexSource,\n\t\n\t\tfragmentSource: '#version 300 es\\n\\t\\tprecision highp float;\\n\\t\\tuniform sampler2D uSampler;\\n\\t\\tin vec2 vTexturePosition;\\n\\t\\tin vec2 vPosition;\\n\\t\\tuniform vec2 uMousePosition;\\n\\t\\tuniform highp float uWidth;\\n\\t\\tuniform int uShouldUpdate;\\n\\t\\tout vec4 fragmentColor;\\n\\n\\t\\tbool isLive(vec2 offset) {\\n\\t\\t\\t\\tvec4 lastColor = texture(uSampler, vTexturePosition + offset);\\n\\t\\t\\t\\tif (lastColor.r == 1.0) {\\n\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tvoid main(void) {\\n\\t\\t\\tvec4 lastColor = texture(uSampler, vTexturePosition);\\n\\n\\t\\t\\tif (uShouldUpdate == 0) {\\n\\t\\t\\t\\tfragmentColor = lastColor;\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tfloat d = distance(uMousePosition, vPosition);\\n\\t\\t\\tif (d < 50.0/uWidth) {\\n\\t\\t\\t\\tfragmentColor = vec4(1.0, 0, 0, 1.0);\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tint liveCount = 0;\\n\\t\\t\\tfloat step = 1.0/uWidth;\\n\\n\\t\\t\\tif (isLive(vec2(-step, -step))) {liveCount++;}\\n\\t\\t\\tif (isLive(vec2(-step, 0))) {liveCount++;}\\n\\t\\t\\tif (isLive(vec2(-step, step))) {liveCount++;}\\n\\t\\t\\tif (isLive(vec2(0, -step))) {liveCount++;}\\n\\t\\t\\tif (isLive(vec2(0, step))) {liveCount++;}\\n\\t\\t\\tif (isLive(vec2(step, -step))) {liveCount++;}\\n\\t\\t\\tif (isLive(vec2(step, 0))) {liveCount++;}\\n\\t\\t\\tif (isLive(vec2(step, step))) {liveCount++;}\\n\\n\\t\\t\\t// if (liveCount < 2) {\\n\\t\\t\\t// \\tfragmentColor = vec4(1.0, 0, 0, 1.0);\\n\\t\\t\\t// } else if (liveCount < 4) {\\n\\t\\t\\t// \\tfragmentColor = vec4(0, 1.0, 0, 1.0);\\n\\t\\t\\t// } else if (liveCount < 8) {\\n\\t\\t\\t// \\tfragmentColor = vec4(0, 0, 1.0, 1.0);\\n\\t\\t\\t// } else {\\n\\t\\t\\t// \\tfragmentColor = vec4(1.0, 0, 1.0, 1.0);\\n\\t\\t\\t// }\\n\\n\\t\\t\\tbool selfIsLive = isLive(vec2(0,0));\\n\\t\\t\\tif (selfIsLive && (liveCount == 2 || liveCount == 3)) {\\n\\t\\t\\t\\tif (lastColor.g < 1.0) {\\n\\t\\t\\t\\t\\tfragmentColor = lastColor + vec4(1.0, 0.01, 0.0, 1.0);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tfragmentColor = lastColor + vec4(1.0, 0.0, 0.01, 1.0);\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else if (!selfIsLive && (liveCount == 3)) {\\n\\t\\t\\t\\tfragmentColor = vec4(1.0, 0, 0, 1.0);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tfragmentColor = vec4(0.0, 0.0, 0.0, 0.8);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t'\n\t};\n\texports.default = GameOfLife;\n\n/***/ },\n/* 6 */,\n/* 7 */,\n/* 8 */,\n/* 9 */,\n/* 10 */,\n/* 11 */,\n/* 12 */,\n/* 13 */,\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _webgl = __webpack_require__(1);\n\t\n\tvar _stateProgram = __webpack_require__(4);\n\t\n\tvar _stateProgram2 = _interopRequireDefault(_stateProgram);\n\t\n\tvar _renderProgram = __webpack_require__(3);\n\t\n\tvar _renderProgram2 = _interopRequireDefault(_renderProgram);\n\t\n\tvar _gameoflife = __webpack_require__(5);\n\t\n\tvar _gameoflife2 = _interopRequireDefault(_gameoflife);\n\t\n\tvar _gameoflifeBlur = __webpack_require__(16);\n\t\n\tvar _gameoflifeBlur2 = _interopRequireDefault(_gameoflifeBlur);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tconsole.log('🐭');\n\t\n\tvar canvas = document.createElement('canvas');\n\tdocument.body.appendChild(canvas);\n\tvar gl = canvas.getContext('webgl2');\n\t\n\tvar golStateProgram = new _stateProgram2.default({ shaderSource: _gameoflife2.default });\n\tvar golRenderProgram = new _renderProgram2.default({ shaderSource: _gameoflifeBlur2.default });\n\t\n\t// // const uMousePosition = gl.getUniformLocation(shaderProgram, \"uMousePosition\");\n\t//\n\t//\n\t// // INTERACTION HANDLER\n\t// var mousePosition = [];\n\t// gl.canvas.addEventListener('mousemove', evt => {\n\t//   mousePosition = [\n\t//     (evt.clientX/gl.canvas.width - 0.5) * 2.0,\n\t//     (1.0 - evt.clientY/gl.canvas.height - 0.5) * 2.0\n\t//   ];\n\t// \t// draw();\n\t// });\n\t// END INTERACTION HANDLER\n\t\n\t// DRAW LOOP\n\tgl.clearColor(0, 0, 0, 1.0);\n\tgl.clear(gl.COLOR_BUFFER_BIT);\n\t\n\t//Initial state\n\t// const initialCanvas = document.createElement('canvas');\n\t// initialCanvas.width = gl.canvas.width;\n\t// initialCanvas.height = gl.canvas.height;\n\t// const context = initialCanvas.getContext('2d');\n\t// context.globalAlpha = 1.0;\n\tvar initialArray = [];\n\tconsole.time('Init');\n\tfor (var i = 0; i < gl.canvas.width; i++) {\n\t\tfor (var j = 0; j < gl.canvas.height; j++) {\n\t\t\tif (Math.random() < 0.35) {\n\t\t\t\t// context.fillStyle = 'red';\n\t\t\t\t// context.fillRect(i, j, 1, 1);\n\t\t\t\tinitialArray[(j * gl.canvas.width + i) * 4] = 255;\n\t\t\t\tinitialArray[(j * gl.canvas.width + i) * 4 + 1] = 0.0;\n\t\t\t\tinitialArray[(j * gl.canvas.width + i) * 4 + 2] = 0.0;\n\t\t\t\tinitialArray[(j * gl.canvas.width + i) * 4 + 3] = 255;\n\t\t\t} else {\n\t\t\t\t// context.fillStyle = 'black';\n\t\t\t\t// context.fillRect(i, j, 1, 1);\n\t\t\t\tinitialArray[(j * gl.canvas.width + i) * 4] = 0.0;\n\t\t\t\tinitialArray[(j * gl.canvas.width + i) * 4 + 1] = 0.0;\n\t\t\t\tinitialArray[(j * gl.canvas.width + i) * 4 + 2] = 0.0;\n\t\t\t\tinitialArray[(j * gl.canvas.width + i) * 4 + 3] = 255;\n\t\t\t}\n\t\t}\n\t}\n\t// context.fillStyle = 'red';\n\t// context.fillRect(0, 0, 64, 64);\n\t// golStateProgram.setState(initialCanvas);\n\tgolStateProgram.setState(new ImageData(new Uint8ClampedArray(initialArray), gl.canvas.width, gl.canvas.height));\n\tconsole.timeEnd('Init');\n\t\n\tvar flip = 0;\n\t\n\tvar isPaused = true;\n\tfunction draw() {\n\t\t// gl.uniform2f(uMousePosition, mousePosition[0], mousePosition[1]);\n\t\n\t\t// golStateProgram.drawState();\n\t\n\t\tgolRenderProgram.draw(golStateProgram.stateTexture());\n\t\n\t\t// setTimeout(draw, 100);\n\t\tif (!isPaused) {\n\t\t\tgolStateProgram.incrementState();\n\t\t\trequestAnimationFrame(draw);\n\t\t}\n\t}\n\trequestAnimationFrame(draw);\n\t// END DRAW LOOP\n\t\n\tgl.canvas.addEventListener('click', function (evt) {\n\t\tgolStateProgram.incrementState();\n\t\tdraw();\n\t});\n\tdocument.addEventListener('keypress', function (evt) {\n\t\tconsole.log(evt);\n\t\tif (evt.key == 'p') {\n\t\t\tisPaused = !isPaused;\n\t\t}\n\t\tdraw();\n\t});\n\n/***/ },\n/* 15 */,\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t\tvalue: true\n\t});\n\t\n\tvar _identity2d = __webpack_require__(2);\n\t\n\tvar _identity2d2 = _interopRequireDefault(_identity2d);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tvar GameOfLifeBlur = {\n\t\tvertexSource: _identity2d2.default.vertexSource,\n\t\n\t\tfragmentSource: '#version 300 es\\n\\t\\tprecision highp float;\\n\\t\\tuniform sampler2D uSampler;\\n\\t\\tin vec2 vTexturePosition;\\n\\t\\tin vec2 vPosition;\\n\\t\\tout vec4 fragmentColor;\\n\\n\\t\\tbool isLive(vec2 offset) {\\n\\t\\t\\t\\tvec4 stateColor = texture(uSampler, vTexturePosition + offset);\\n\\t\\t\\t\\tif (stateColor.r == 1.0) {\\n\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tbool radiusIsLive(int radius) {\\n\\t\\t\\tivec2 size = textureSize(uSampler, 0);\\n\\t\\t\\tfloat stepX = 1.0/float(size.x);\\n\\t\\t\\tfloat stepY = 1.0/float(size.y);\\n\\t\\t\\tint side = 2*radius + 1;\\n\\n\\n\\t\\t\\tfor (int x = 0; x < side; x++) {\\n\\t\\t\\t\\tfor (int y = 0; y < side; y++) {\\n\\t\\t\\t\\t\\tif (isLive(vec2(stepX * float(-radius + x), stepY * float(-radius + y)))) {\\n\\t\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\treturn false;\\n\\t\\t\\t//Top\\n\\t\\t\\tfor (int i = 0; i < side; i++) {\\n\\t\\t\\t\\tif (isLive(vec2(stepX * float(-radius + i), stepY * float(-radius)))) {\\n\\t\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t//Left\\n\\t\\t\\tfor (int i = 0; i < side; i++) {\\n\\t\\t\\t\\tif (isLive(vec2(stepX * float(-radius), - stepY * float(-radius + i)))) {\\n\\t\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t//Right\\n\\t\\t\\tfor (int i = 0; i < side; i++) {\\n\\t\\t\\t\\tif (isLive(vec2(stepX * float(radius), - stepY * float(-radius + i)))) {\\n\\t\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\t//Bottom\\n\\t\\t\\tfor (int i = 0; i < side; i++) {\\n\\t\\t\\t\\tif (isLive(vec2(stepX * float(-radius + i), stepY * float(radius)))) {\\n\\t\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\n\\t\\t\\treturn false;\\n\\n\\t\\t}\\n\\n\\t\\tvoid main(void) {\\n\\t\\t\\t// fragmentColor = texture(uSampler, vTexturePosition);\\n\\t\\t\\t// return;\\n\\n\\t\\t\\tivec2 size = textureSize(uSampler, 0);\\n\\t\\t\\tfloat stepX = 1.0/float(size.x);\\n\\t\\t\\tfloat stepY = 1.0/float(size.y);\\n\\t\\t\\tif (radiusIsLive(5)) {\\n\\t\\t\\t\\t\\tfragmentColor = vec4(1.0, 1.0, 1.0, 1.0);\\n\\t\\t\\t\\t\\treturn;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tfragmentColor = vec4(0.0, 0.0, 0.0, 1.0);\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\t\\t\\t// fragmentColor = (\\n\\t\\t\\t// \\ttexture(uSampler, vTexturePosition) +\\n\\t\\t\\t// \\ttexture(uSampler, vTexturePosition - vec2(stepX, stepY)) +\\n\\t\\t\\t// \\ttexture(uSampler, vTexturePosition - vec2(-stepX, stepY)) +\\n\\t\\t\\t// \\ttexture(uSampler, vTexturePosition - vec2(stepX, -stepY)) +\\n\\t\\t\\t// \\ttexture(uSampler, vTexturePosition - vec2(-stepX, -stepY))\\n\\t\\t\\t// )/5.0;\\n\\t\\t}\\n\\t'\n\t};\n\t\n\texports.default = GameOfLifeBlur;\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** gol-render.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap c3815b4d43a585c13646\n **/","export function createProgram(vertexSource, fragmentSource, scale = 1) {\n\t// GLOBALS\n\tconst body = document.body;\n\tconst canvas = document.querySelector('canvas');\n\tconst gl = canvas.getContext('webgl2');\n\t// END GLOBALS\n\n\t// BEGIN WINDOW SIZING\n\tfunction resize() {\n\t\tconst size = Math.pow(2,Math.floor(Math.log2(Math.min(window.innerWidth, window.innerHeight))))*2*scale;\n\t\t// const size = 256;\n\t\tcanvas.width = size;\n\t\tcanvas.height = size;\n\t\tcanvas.style.width = size/2 + 'px';\n\t\tcanvas.style.height = size/2 + 'px';\n\n\t\t// Set viewport\n\t\tgl.viewport(0, 0, canvas.width, canvas.height);\n\t}\n\tresize();\n\n\twindow.addEventListener('resize', resize);\n\t// END WINDOW SIZING\n\n\t// GL SETTINGS\n\n\t// Color to draw on clear\n\tgl.clearColor(0,0,0,1);\n\n\t// Clear buffers\n\tgl.clear(gl.COLOR_BUFFER_BIT);\n\n\t// END GL SETTINGS\n\n\t// INITIALIZE SHADERS\n\n\t// CREATE VERTEX SHADER\n\tconst vertexShader = gl.createShader(gl.VERTEX_SHADER);\n\tgl.shaderSource(vertexShader, vertexSource);\n\tgl.compileShader(vertexShader);\n\tif (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\n\t\tthrow new Error(\"An error occurred compiling the shader: \" + gl.getShaderInfoLog(vertexShader));\n\t}else{\n\t\tconsole.log(\"Vertex shader compiled\");\n\t}\n\t// END CREATE VERTEX SHADER\n\n\t// CREATE FRAGMENT SHADER\n\tconst fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n\tgl.shaderSource(fragmentShader, fragmentSource);\n\tgl.compileShader(fragmentShader);\n\tif (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n\t\tthrow new Error(\"An error occurred compiling the shader: \" + gl.getShaderInfoLog(fragmentShader));\n\t}else{\n\t\tconsole.log(\"Fragment shader compiled\");\n\t}\n\t// END CREATE FRAGMENT SHADER\n\n\t// COMPILE PROGRAM\n\tconst shaderProgram = gl.createProgram();\n\tgl.attachShader(shaderProgram, vertexShader);\n\tgl.attachShader(shaderProgram, fragmentShader);\n\tgl.linkProgram(shaderProgram);\n\n\tif (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\n\t\tthrow new Error(\"Unable to initialize the shader program.\");\n\t}else{\n\t\tconsole.log(\"Initialized shader program\");\n\t}\n\tgl.useProgram(shaderProgram);\n\t// END COMPILE PROGRAM\n\n\t// END INITIALIZE SHADERS\n\n\n\treturn {gl, shaderProgram};\n}\n\nexport function createTexture() {\n\tconst gl = document.querySelector('canvas').getContext('webgl2');\n\tconst tTexture = gl.createTexture();\n\tgl.activeTexture(gl.TEXTURE0);\n\tgl.bindTexture(gl.TEXTURE_2D, tTexture);\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\n\t// gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\n\t// gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n\tgl.bindTexture(gl.TEXTURE_2D, null);\n\treturn tTexture;\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./js/gol/webgl.js\n **/","const Identity2D = {\n\tvertexSource: `#version 300 es\n\t\tprecision highp float;\n\t\tin vec3 aPosition;\n\t\tout vec2 vTexturePosition;\n\t\tout vec2 vPosition;\n\t\tvoid main(void) {\n\t\t\tvPosition = aPosition.xy;\n\t\t\tvTexturePosition = vec2(aPosition.x + 1.0, -1.0 + aPosition.y) * 0.5;\n\t\t\tgl_Position = vec4(aPosition, 1.0);\n\t\t}\n\t`,\n\tfragmentSource: `#version 300 es\n\t\tprecision highp float;\n\t\tuniform sampler2D uSampler;\n\t\tuniform float uScale;\n\t\tin vec2 vTexturePosition;\n\t\tin vec2 vPosition;\n\t\tout vec4 fragmentColor;\n\n\t\tvoid main(void) {\n\t\t\tfragmentColor = texture(uSampler, vTexturePosition/uScale);\n\t\t}\n\t`\n};\n\nexport default Identity2D;\n\n\n\n/** WEBPACK FOOTER **\n ** ./js/gol/programs/identity2d.js\n **/","import {createProgram, createTexture} from './webgl';\n\nexport default class RenderProgram {\n\tconstructor({shaderSource, scale = 1}) {\n\t\tlet {gl, shaderProgram} = createProgram(shaderSource.vertexSource, shaderSource.fragmentSource, scale);\n\t\tthis.gl = gl;\n\t\tthis.shaderProgram = shaderProgram;\n\t\tthis.currentState = 0;\n\n\t\t// INITIALIZE BUFFERS\n\t\tthis.vertexBuffer = gl.createBuffer();\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n\t\tthis.vertices = [\n\t\t\t1, 1, 0,\n\t\t\t-1, 1, 0,\n\t\t\t1, -1, 0,\n\t\t\t-1, -1, 0\n\t\t];\n\t\tgl.bufferData(gl.ARRAY_BUFFER, new Float32Array(this.vertices), gl.STATIC_DRAW);\n\t\t// END INITIALIZE BUFFERS\n\n\t\t// POINTERS\n\t\tconst aPosition = gl.getAttribLocation(shaderProgram, \"aPosition\");\n\t\tgl.enableVertexAttribArray(aPosition);\n\t\t//gl.vertexAttribPointer(index, size, type, normalized, stride, offset);\n\t\tgl.vertexAttribPointer(aPosition, 3, gl.FLOAT, false, 0, 0);\n\n\t\tconst uWidth = gl.getUniformLocation(shaderProgram, \"uWidth\");\n\t\tgl.uniform1f(uWidth, gl.canvas.width);\n\n\t}\n\n\tdraw(stateTexture, predraw = ()=>{}) {\n\t\tconst gl = this.gl;\n\n\t\tgl.useProgram(this.shaderProgram);\n\t\tconst uScale = gl.getUniformLocation(this.shaderProgram, \"uScale\");\n\t\tgl.uniform1f(uScale, 1);\n\t\tpredraw();\n\t\tgl.bindTexture(gl.TEXTURE_2D, stateTexture);\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n\t\tgl.drawArrays(gl.TRIANGLE_STRIP, 0, this.vertices.length / 3);\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, null);\n\t\tgl.bindTexture(gl.TEXTURE_2D, null);\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./js/gol/render-program.js\n **/","import {createProgram, createTexture} from './webgl';\n\nexport default class StateProgram {\n\tconstructor({shaderSource, scale = 1}) {\n\t\tlet {gl, shaderProgram} = createProgram(shaderSource.vertexSource, shaderSource.fragmentSource, scale);\n\t\tthis.gl = gl;\n\t\tthis.shaderProgram = shaderProgram;\n\t\tthis.currentState = 0;\n\t\tthis.iteration = 0;\n\n\t\t// INITIALIZE BUFFERS\n\t\tthis.vertexBuffer = gl.createBuffer();\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n\t\tthis.vertices = [\n\t\t\t1, 1, 0,\n\t\t\t-1, 1, 0,\n\t\t\t1, -1, 0,\n\t\t\t-1, -1, 0\n\t\t];\n\t\tgl.bufferData(gl.ARRAY_BUFFER, new Float32Array(this.vertices), gl.STATIC_DRAW);\n\t\t// END INITIALIZE BUFFERS\n\n\t\t// POINTERS\n\t\tconst aPosition = gl.getAttribLocation(shaderProgram, \"aPosition\");\n\t\tgl.enableVertexAttribArray(aPosition);\n\t\t//gl.vertexAttribPointer(index, size, type, normalized, stride, offset);\n\t\tgl.vertexAttribPointer(aPosition, 3, gl.FLOAT, false, 0, 0);\n\n\t\tconst uWidth = gl.getUniformLocation(shaderProgram, \"uWidth\");\n\t\tgl.uniform1f(uWidth, gl.canvas.width);\n\n\t\tthis.uShouldUpdate = gl.getUniformLocation(shaderProgram, \"uShouldUpdate\");\n\t\tthis.uIteration = gl.getUniformLocation(shaderProgram, \"uIteration\");\n\n\t\tthis.tTexture0 = createTexture();\n\t\tthis.tTexture1 = createTexture();\n\n\t\tthis.frameBuffer = gl.createFramebuffer();\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, this.frameBuffer);\n\t\tthis.frameBuffer.width = gl.canvas.width;\n\t\tthis.frameBuffer.height = gl.canvas.height;\n\t\tgl.bindTexture(gl.TEXTURE_2D, this.tTexture1);\n\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.frameBuffer.width, this.frameBuffer.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n\n\t\tvar renderBuffer = gl.createRenderbuffer();\n\t\tgl.bindRenderbuffer(gl.RENDERBUFFER, renderBuffer);\n\t\tgl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, this.frameBuffer.width, this.frameBuffer.height);\n\t\tgl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, renderBuffer);\n\n\t\tgl.bindRenderbuffer(gl.RENDERBUFFER, null);\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n\t}\n\n\tsetState(state) {\n\t\tconst gl = this.gl;\n\t\tgl.bindTexture(gl.TEXTURE_2D, this.tTexture0);\n\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, state);\n\t\tgl.bindTexture(gl.TEXTURE_2D, null);\n\t}\n\n\tdrawState() {\n\t\tconst gl = this.gl;\n\t\tgl.useProgram(this.shaderProgram);\n\n\t\tgl.uniform1i(this.uShouldUpdate, 0);\n\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\t\tif (this.currentState == 0) {\n\t\t\tgl.bindTexture(gl.TEXTURE_2D, this.tTexture0);\n\t\t} else {\n\t\t\tgl.bindTexture(gl.TEXTURE_2D, this.tTexture1);\n\t\t}\n\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n\t\tgl.drawArrays(gl.TRIANGLE_STRIP, 0, this.vertices.length / 3);\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n\t}\n\n\tincrementState({mousePosition}={}) {\n\t\tconst gl = this.gl;\n\t\tgl.useProgram(this.shaderProgram);\n\n\t\tgl.uniform1i(this.uShouldUpdate, 1);\n\t\tgl.uniform1i(this.uIteration, this.iteration);\n\t\tthis.iteration++;\n\n\t\tconst uMousePosition = gl.getUniformLocation(this.shaderProgram, \"uMousePosition\");\n\t\tif (mousePosition && mousePosition.length == 2) {\n\t\t\tgl.uniform2f(uMousePosition, mousePosition[0], mousePosition[1]);\n\t\t} else {\n\t\t\tgl.uniform2f(uMousePosition, -10, -10);\n\t\t}\n\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, this.frameBuffer);\n\t\tif (this.currentState == 0) {\n\t\t\tgl.bindTexture(gl.TEXTURE_2D, this.tTexture0);\n\t\t\tgl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.tTexture1, 0);\n\t\t} else {\n\t\t\tgl.bindTexture(gl.TEXTURE_2D, this.tTexture1);\n\t\t\tgl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.tTexture0, 0);\n\t\t}\n\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n\t\tgl.drawArrays(gl.TRIANGLE_STRIP, 0, this.vertices.length / 3);\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n\t\tgl.bindTexture(gl.TEXTURE_2D, null);\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n\t\tthis.currentState = (this.currentState + 1) % 2;\n\t}\n\n\tstateTexture() {\n\t\tif (this.currentState == 0) {\n\t\t\treturn this.tTexture0;\n\t\t} else {\n\t\t\treturn this.tTexture1;\n\t\t}\n\t}\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./js/gol/state-program.js\n **/","import identity from './identity2d';\n\nconst GameOfLife = {\n\tvertexSource: identity.vertexSource,\n\n\tfragmentSource: `#version 300 es\n\t\tprecision highp float;\n\t\tuniform sampler2D uSampler;\n\t\tin vec2 vTexturePosition;\n\t\tin vec2 vPosition;\n\t\tuniform vec2 uMousePosition;\n\t\tuniform highp float uWidth;\n\t\tuniform int uShouldUpdate;\n\t\tout vec4 fragmentColor;\n\n\t\tbool isLive(vec2 offset) {\n\t\t\t\tvec4 lastColor = texture(uSampler, vTexturePosition + offset);\n\t\t\t\tif (lastColor.r == 1.0) {\n\t\t\t\t\treturn true;\n\t\t\t\t} else {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t}\n\n\t\tvoid main(void) {\n\t\t\tvec4 lastColor = texture(uSampler, vTexturePosition);\n\n\t\t\tif (uShouldUpdate == 0) {\n\t\t\t\tfragmentColor = lastColor;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfloat d = distance(uMousePosition, vPosition);\n\t\t\tif (d < 50.0/uWidth) {\n\t\t\t\tfragmentColor = vec4(1.0, 0, 0, 1.0);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tint liveCount = 0;\n\t\t\tfloat step = 1.0/uWidth;\n\n\t\t\tif (isLive(vec2(-step, -step))) {liveCount++;}\n\t\t\tif (isLive(vec2(-step, 0))) {liveCount++;}\n\t\t\tif (isLive(vec2(-step, step))) {liveCount++;}\n\t\t\tif (isLive(vec2(0, -step))) {liveCount++;}\n\t\t\tif (isLive(vec2(0, step))) {liveCount++;}\n\t\t\tif (isLive(vec2(step, -step))) {liveCount++;}\n\t\t\tif (isLive(vec2(step, 0))) {liveCount++;}\n\t\t\tif (isLive(vec2(step, step))) {liveCount++;}\n\n\t\t\t// if (liveCount < 2) {\n\t\t\t// \tfragmentColor = vec4(1.0, 0, 0, 1.0);\n\t\t\t// } else if (liveCount < 4) {\n\t\t\t// \tfragmentColor = vec4(0, 1.0, 0, 1.0);\n\t\t\t// } else if (liveCount < 8) {\n\t\t\t// \tfragmentColor = vec4(0, 0, 1.0, 1.0);\n\t\t\t// } else {\n\t\t\t// \tfragmentColor = vec4(1.0, 0, 1.0, 1.0);\n\t\t\t// }\n\n\t\t\tbool selfIsLive = isLive(vec2(0,0));\n\t\t\tif (selfIsLive && (liveCount == 2 || liveCount == 3)) {\n\t\t\t\tif (lastColor.g < 1.0) {\n\t\t\t\t\tfragmentColor = lastColor + vec4(1.0, 0.01, 0.0, 1.0);\n\t\t\t\t} else {\n\t\t\t\t\tfragmentColor = lastColor + vec4(1.0, 0.0, 0.01, 1.0);\n\t\t\t\t}\n\t\t\t} else if (!selfIsLive && (liveCount == 3)) {\n\t\t\t\tfragmentColor = vec4(1.0, 0, 0, 1.0);\n\t\t\t} else {\n\t\t\t\tfragmentColor = vec4(0.0, 0.0, 0.0, 0.8);\n\t\t\t}\n\t\t}\n\t`\n};\nexport default GameOfLife;\n\n\n\n/** WEBPACK FOOTER **\n ** ./js/gol/programs/gameoflife.js\n **/","import {createProgram} from './gol/webgl';\nimport StateProgram from './gol/state-program';\nimport RenderProgram from './gol/render-program';\nimport GameOfLife from './gol/programs/gameoflife';\nimport Blur from './gol/programs/gameoflife-blur';\n\nconsole.log('🐭');\n\nlet canvas = document.createElement('canvas');\ndocument.body.appendChild(canvas);\nlet gl = canvas.getContext('webgl2');\n\nlet golStateProgram = new StateProgram({shaderSource: GameOfLife});\nlet golRenderProgram = new RenderProgram({shaderSource: Blur});\n\n// // const uMousePosition = gl.getUniformLocation(shaderProgram, \"uMousePosition\");\n//\n//\n// // INTERACTION HANDLER\n// var mousePosition = [];\n// gl.canvas.addEventListener('mousemove', evt => {\n//   mousePosition = [\n//     (evt.clientX/gl.canvas.width - 0.5) * 2.0,\n//     (1.0 - evt.clientY/gl.canvas.height - 0.5) * 2.0\n//   ];\n// \t// draw();\n// });\n// END INTERACTION HANDLER\n\n// DRAW LOOP\ngl.clearColor(0, 0, 0, 1.0);\ngl.clear(gl.COLOR_BUFFER_BIT);\n\n//Initial state\n// const initialCanvas = document.createElement('canvas');\n// initialCanvas.width = gl.canvas.width;\n// initialCanvas.height = gl.canvas.height;\n// const context = initialCanvas.getContext('2d');\n// context.globalAlpha = 1.0;\nconst initialArray = [];\nconsole.time('Init');\nfor (var i = 0; i < gl.canvas.width; i++) {\n\tfor (var j = 0; j < gl.canvas.height; j++) {\n\t\tif (Math.random() < 0.35) {\n\t\t\t// context.fillStyle = 'red';\n\t\t\t// context.fillRect(i, j, 1, 1);\n\t\t\tinitialArray[(j*gl.canvas.width + i)*4] = 255;\n\t\t\tinitialArray[(j*gl.canvas.width + i)*4+1] = 0.0;\n\t\t\tinitialArray[(j*gl.canvas.width + i)*4+2] = 0.0;\n\t\t\tinitialArray[(j*gl.canvas.width + i)*4+3] = 255;\n\t\t} else {\n\t\t\t// context.fillStyle = 'black';\n\t\t\t// context.fillRect(i, j, 1, 1);\n\t\t\tinitialArray[(j*gl.canvas.width + i)*4] = 0.0;\n\t\t\tinitialArray[(j*gl.canvas.width + i)*4+1] = 0.0;\n\t\t\tinitialArray[(j*gl.canvas.width + i)*4+2] = 0.0;\n\t\t\tinitialArray[(j*gl.canvas.width + i)*4+3] = 255;\n\t\t}\n\t}\n}\n// context.fillStyle = 'red';\n// context.fillRect(0, 0, 64, 64);\n// golStateProgram.setState(initialCanvas);\ngolStateProgram.setState(new ImageData(new Uint8ClampedArray(initialArray), gl.canvas.width, gl.canvas.height));\nconsole.timeEnd('Init');\n\n\nlet flip = 0;\n\nvar isPaused = true;\nfunction draw() {\n\t// gl.uniform2f(uMousePosition, mousePosition[0], mousePosition[1]);\n\n\t// golStateProgram.drawState();\n\n\n\tgolRenderProgram.draw(golStateProgram.stateTexture());\n\n  // setTimeout(draw, 100);\n\tif (!isPaused) {\n\t\tgolStateProgram.incrementState();\n\t\trequestAnimationFrame(draw);\n\t}\n}\nrequestAnimationFrame(draw);\n// END DRAW LOOP\n\ngl.canvas.addEventListener('click', evt => {\n\tgolStateProgram.incrementState();\n\tdraw();\n});\ndocument.addEventListener('keypress', evt => {\n\tconsole.log(evt);\n\tif (evt.key == 'p') {\n\t\tisPaused = !isPaused;\n\t}\n\tdraw();\n});\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./js/gol-render.js\n **/","import identity from './identity2d';\n\nconst GameOfLifeBlur = {\n\tvertexSource: identity.vertexSource,\n\n\tfragmentSource: `#version 300 es\n\t\tprecision highp float;\n\t\tuniform sampler2D uSampler;\n\t\tin vec2 vTexturePosition;\n\t\tin vec2 vPosition;\n\t\tout vec4 fragmentColor;\n\n\t\tbool isLive(vec2 offset) {\n\t\t\t\tvec4 stateColor = texture(uSampler, vTexturePosition + offset);\n\t\t\t\tif (stateColor.r == 1.0) {\n\t\t\t\t\treturn true;\n\t\t\t\t} else {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t}\n\n\t\tbool radiusIsLive(int radius) {\n\t\t\tivec2 size = textureSize(uSampler, 0);\n\t\t\tfloat stepX = 1.0/float(size.x);\n\t\t\tfloat stepY = 1.0/float(size.y);\n\t\t\tint side = 2*radius + 1;\n\n\n\t\t\tfor (int x = 0; x < side; x++) {\n\t\t\t\tfor (int y = 0; y < side; y++) {\n\t\t\t\t\tif (isLive(vec2(stepX * float(-radius + x), stepY * float(-radius + y)))) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t\t//Top\n\t\t\tfor (int i = 0; i < side; i++) {\n\t\t\t\tif (isLive(vec2(stepX * float(-radius + i), stepY * float(-radius)))) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//Left\n\t\t\tfor (int i = 0; i < side; i++) {\n\t\t\t\tif (isLive(vec2(stepX * float(-radius), - stepY * float(-radius + i)))) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//Right\n\t\t\tfor (int i = 0; i < side; i++) {\n\t\t\t\tif (isLive(vec2(stepX * float(radius), - stepY * float(-radius + i)))) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//Bottom\n\t\t\tfor (int i = 0; i < side; i++) {\n\t\t\t\tif (isLive(vec2(stepX * float(-radius + i), stepY * float(radius)))) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t}\n\n\t\tvoid main(void) {\n\t\t\t// fragmentColor = texture(uSampler, vTexturePosition);\n\t\t\t// return;\n\n\t\t\tivec2 size = textureSize(uSampler, 0);\n\t\t\tfloat stepX = 1.0/float(size.x);\n\t\t\tfloat stepY = 1.0/float(size.y);\n\t\t\tif (radiusIsLive(5)) {\n\t\t\t\t\tfragmentColor = vec4(1.0, 1.0, 1.0, 1.0);\n\t\t\t\t\treturn;\n\t\t\t} else {\n\t\t\t\tfragmentColor = vec4(0.0, 0.0, 0.0, 1.0);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// fragmentColor = (\n\t\t\t// \ttexture(uSampler, vTexturePosition) +\n\t\t\t// \ttexture(uSampler, vTexturePosition - vec2(stepX, stepY)) +\n\t\t\t// \ttexture(uSampler, vTexturePosition - vec2(-stepX, stepY)) +\n\t\t\t// \ttexture(uSampler, vTexturePosition - vec2(stepX, -stepY)) +\n\t\t\t// \ttexture(uSampler, vTexturePosition - vec2(-stepX, -stepY))\n\t\t\t// )/5.0;\n\t\t}\n\t`\n};\n\nexport default GameOfLifeBlur;\n\n\n\n/** WEBPACK FOOTER **\n ** ./js/gol/programs/gameoflife-blur.js\n **/"],"sourceRoot":""}